from sympy import isprime, primitive_root
from alogrithm import Alogrithm
from random import randint
from math import gcd
import time

x = "thisismysignature"


def generate_k(p):
    while True:
        k = randint(1, p - 2)
        if gcd(k, p - 1) == 1:
            return k


start = time.time()

# Chuyển đổi x thành số
h_x = int(Alogrithm.text_to_numbers(x))
output = []  # Danh sách để lưu các dòng đầu ra
output.append(f"h(x) = {h_x}\n")

# Tạo số nguyên tố ngẫu nhiên p
p = 880251358439347289670887393305092562045731051217069987660050219362357203082542882007257650130997944179376315747212112239002340660153459935690149947432755909648142794002036480156084038834004084536695485986640488551685488444278131845449772220029308389150911167782230010994030069935655547900336150002145261110179885964793248392591582254538494303733523944883263037518370100207216754067087198512041855433996756366584360154270282333087027842075923131529418656683224292591866502778674163391674053109078549897883439058044465413151173462268500196346216133624593357158892579150141280577757274249454424881042165698502200332638551887436285509664895327654571128864236686523827092630281324846270974809259922082714977273623772532412683882962991941217338712281731026480072345125573856239393649501843278727990297366943795364860976592590004825918815091519308574896949397862753643153343722343290762418700169114169919540993518063381240804142434655355561358748417323737141736691592208892020585014010080442732770424616466504041196735958972529993048542456953958572285642691152946711968045402078642279640886151316181014425573262786790855302019751722332364383229341206277373693847997571748126909729248399797090188621319400208021781484558763503005248597376191262997141411327167158081021688248265362459098671005398966175983504913977087010369642575263426929351768113458927528910345277621020776246501905452751052980717776420140522388352193205826817219688824201479572192880338257919235197305945529273556363722490534168101809766761301239611305147148478436084875729867049029283638251880339019157360242269824882500448865131988741208096813268059972142152668147915007735281855510493234212164687962255525238639745470662081852726258612221419164717773030724354266002682508019985041550227289959622042702925017788893583475674469871495643353972686406753139794230522961325333585069706864542792829303076297407367492033863219930556917791817817387443428539013084882884682707537584904687600203598730297865951589108278870457052000459488133119117423725672900060536768269182150908672454648752346762111144017330683411227557846333992020183160865957241399636257972901361598176508831213108664194113585041190286876154925134242911662182527879206296823343909403721006172417811223036423291722261845167014568376661078075200555602595574874378982945649803953413674450408558166160901985046458269944873547047605823960777982590922410490827062714582658462308375464378204163479397400170995946739098052597349598652280146146953917883
output.append(f"p = {p}\n")

# Tạo a và tìm gốc nguyên thủy
a = randint(1, p - 1)
ampha = Alogrithm.find_primitive_root(p)

output.append(f"Khoá bí mật a = {a}\n")
output.append(f"alpha = {ampha}\n")

# Tạo k
k = generate_k(p)
output.append(f"k = {k}\n")

# Tính toán beta
beta = pow(ampha, a, p)
output.append(f"beta = {beta}\n")

# Tính toán gamma và sigma
gamma = pow(ampha, k, p)
sigma = ((h_x - a * gamma) * Alogrithm.inverse_modulo(p - 1, k)) % (p - 1)
output.append(f"Chữ ký là: \n(gamma = {gamma}, \nsigma = {sigma})\n")

# Kiểm tra chữ ký
left = (pow(beta, gamma, p) * pow(gamma, sigma, p)) % p
right = pow(ampha, h_x, p)
output.append("Kiểm tra chữ ký:\n")
if left == right:
    output.append("Chữ ký hợp lệ\n")
else:
    output.append("Chữ ký không hợp lệ\n")

# Kết thúc đếm thời gian
end = time.time()
output.append(f"Thời gian chạy là: {end - start}\n")

# Ghi vào file elgamal_signature.txt
with open("elgamal_signature.txt", "w", encoding="utf-8") as f:
    f.writelines(output)
